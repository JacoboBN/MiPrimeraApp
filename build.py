"""
Script para compilar la aplicaci√≥n a un archivo .exe
Requiere PyInstaller: pip install pyinstaller
"""

import os
import subprocess
import shutil

def build_exe():
    """Compila la aplicaci√≥n a .exe"""
    
    print("üî® Compilando aplicaci√≥n...")
    
    # Comando para PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",                    # Un solo archivo .exe
        "--windowed",                   # Sin consola (solo ventana gr√°fica)
        "--name=MiApp",                # Nombre del ejecutable
        "--icon=icon.ico",             # Icono (opcional, crear un icon.ico)
        "--add-data=version.txt;.",    # Incluir archivo de versi√≥n
        "main.py"
    ]
    
    # Crear archivo de versi√≥n inicial si no existe
    if not os.path.exists("version.txt"):
        with open("version.txt", "w") as f:
            f.write("1.0.0")
    
    # Ejecutar PyInstaller
    try:
        subprocess.run(cmd, check=True)
        print("‚úÖ Compilaci√≥n exitosa!")
        
        # Mover el .exe a la carpeta ra√≠z
        if os.path.exists("dist/MiApp.exe"):
            if os.path.exists("MiApp.exe"):
                os.remove("MiApp.exe")
            shutil.move("dist/MiApp.exe", "MiApp.exe")
            print("üìÅ Archivo MiApp.exe creado")
            
        # Limpiar archivos temporales
        cleanup()
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en la compilaci√≥n: {e}")
        return False
    
    return True

def cleanup():
    """Limpia archivos temporales de la compilaci√≥n"""
    dirs_to_remove = ["build", "dist", "__pycache__"]
    files_to_remove = ["MiApp.spec"]
    
    for dir_name in dirs_to_remove:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
    
    for file_name in files_to_remove:
        if os.path.exists(file_name):
            os.remove(file_name)
    
    print("üßπ Archivos temporales eliminados")

def create_icon():
    """Crea un icono b√°sico (opcional)"""
    # Este es un placeholder - puedes reemplazar con tu propio icono
    print("üí° Tip: Agrega un archivo 'icon.ico' para personalizar el icono")

if __name__ == "__main__":
    print("üöÄ Iniciando proceso de compilaci√≥n...")
    
    # Verificar que PyInstaller est√© instalado
    try:
        subprocess.run(["pyinstaller", "--version"], 
                      capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå PyInstaller no est√° instalado")
        print("Inst√°lalo con: pip install pyinstaller")
        exit(1)
    
    # Compilar
    if build_exe():
        print("\nüéâ ¬°Aplicaci√≥n compilada exitosamente!")
        print("üì¶ Archivo listo para distribuci√≥n: MiApp.exe")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Sube 'main.py' y 'config.json' a tu repositorio GitHub")
        print("2. Actualiza las URLs en main.py con tu repositorio")
        print("3. Distribuye 'MiApp.exe' a tus usuarios")
    else:
        print("‚ùå Fall√≥ la compilaci√≥n")